The arguments for function is kind of Array, so it can be 0,1 or more arguement for a function. 
  1: if you are using one argument does not existing then you will get undefined message.
  2: there is no overload concept as in Java as the argument is an array it without a signature for a function.
  3: the later function will overwrite privious one if their name are same.

String is a primitive data type in JavaScript not an object like in other language.
Number will present all kind of number type(integer, float, etc.)

Dynamic Properties
    An object with dynamic properties
    A primitive type can not have any properties.

Copying Value
  Primitive type:  when one primitive value is assigned from one variable to another. there will be new copied value for another variable.
                  and the two values in two variable are seperate.
                  

The arguments for functions are just local varialbe inside the function.

typeof  vs instanceof
  for any type of data: typeof returns the exact type and return functions if it is a function.
  for object type only: instanceof returns true or false.
  
== vs ===
  == with conversion if the operands with different data type, normally it converts them into number type. then compare
  === without any conversion for operands, just compare them directly with exactly data type. 55 is not equal '55'
  
Block Level Scope
  There is no Block Level Scope in JavaScript which is not like Java/C/C++ etc.  Please Be Careful below statment.
  for (var i=0; i < 10; i++){
    doSomething(i);
  }
                   
  alert(i);    //10

  
  Variable Declaration
    Var means it is an variable in the immediate context.
    
    The variable is declared without var keyword means it is a global variable.
    
  Stack vs Heap
  
    primary type is saved in stack
    Object is saved into heap
    
  Garbage Collector  based on Mark and Sweep
  
    1: marks all variables in memory
    2: clear the mark for variables which are referenced by variable in context or it is in context.
    3: delete and reclaim the the variables with the mark then.
    
  IE8 and earlier, BOM/DOM are com object which is not navtive JavaScript Object and the Garbage Collecting mechnism is Reference counting.
  
  So if any javaScript Object is referencing BOM/DOM
  
  Performance/Gargage collecting
  
    IE  it collects the garbage based on the number of allocation
        1:256 variable 
        2:4096 object/array and 64k string
      those are threshhold number, once it reachs those numbers then collector is running.
      the problem will happen if there do have so many numbers of allocation and which will cause frequntly garbage collecting.
    
    
  It is a best practice to dereferrencing one object when it is not needed in such way, it is ready to be reclainmed in next garbage collecting.
  
  set the referrence as 'null' to mark it ready to reclaim
  
  Summary
      Primitive value are fixed size so are stored in memory on Stack
      Referrence value are object and are stored in memory on Heap
      typeof used to identify the type of primitive data type
      instanceof used to identify the referrence type of a value
      
  
    
  

  
